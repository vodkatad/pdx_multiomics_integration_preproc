
configfile: './config'
datadir = config["PRJ_ROOT"] + config["DATA_DIR"]
srcdir = config["SRC"]
n_splits = int(config['N_SPLITS'])
split_indeces = [str(i) for i in range(n_splits)]
wildcard_constraints:
    suffix="\d+"

# map different PDx model ids
# merge drug response data, encode target variable
# split samples in train/test sets (stratified)
rule trainTest_split:
    input:
        ids = datadir+"/mapping_sanger_ID_genealogy_long.tsv",
        drug = datadir + "/drug_response/Treatments_Eugy_Ele_fix0cetuxi_201005.tsv"
    output:
        protected(expand("DrugResponse_LMXfirslevel_trainTest"+"{suffix}"+".tsv", suffix=split_indeces))
    params:
        n_splits = config['N_SPLITS'],
        testSize = config['TEST_SIZE'],
        target_col = config['TARGET_COL'],
        class_labels = config['CLASS_LABELS'],
        class_bins = config['CLASS_BINS']
    threads: 1
    script:
        srcdir+"/1_PDx_drug_response_preTrainTest.py"

# copy number data preprocessing, feature engineering
# these gain/loss thresholds are fairly conservative for PDXs (low impurity)
# for high gain: ~.5 = 1 copy gain, ~1 = 2 copy gain
rule CN_FeatPreproc:
    input:
        response = "DrugResponse_LMXfirslevel_trainTest"+"{suffix}"+".tsv",
        cnv = datadir + "/CNA_annotation/our_cn_genes2_CNVkitREDO_25012021.tsv",
        targeted = datadir + "/targeted_intogen_common_geneset.tsv",
        TCGA_CNV = datadir + "/TCGA_COADREAD_02092020_maskedCNS_intogen_admire-gistic_genewise_CNV_mapToGene.tsv"
    output:
        preproc_CNV = "preproc_CNV" + "{suffix}" + ".tsv"
    params:
        target_col = "Cetuximab_Standard_3wks_cat",
        loss_thr = -.2, 
        gain_thr = .1,
        high_gain_thr = .75
    script:
        srcdir+"/2c_PDx_CN_GeneWise_CNVkitREDO_highCN_agglomeration.py"


# mutation data feature preprocessing
# & feature crosses (2,3 combos) for top chi2 features
rule mut_FeatPreproc:
    input:
        response = "DrugResponse_LMXfirslevel_trainTest"+"{suffix}"+".tsv",
        mut = datadir+"/Driver_Annotation/CodingVariants_All669PDX_samples_26Feb2020_annotated_drivers_shortVersionForPDXfinder_EK.txt"
    output:
        preproc_mut = "preproc_mut" + "{suffix}" + ".tsv"
    params:
        target_col = "Cetuximab_Standard_3wks_cat",
        univ_ptl = "75%" # select top Kth features for combos
    script:
        srcdir+"/2b_mut_featureEngineering.py"


# preprocess variance stabilised RNAseq expression
rule expr_Preproc:
        input:
            response = "DrugResponse_LMXfirslevel_trainTest"+"{suffix}"+".tsv",
            expr = datadir+"/RNAseq/release_2/selected_matrix.tsv"
        output:
            expr_clean_train = temp("clean_expr_train"+"{suffix}"+".tsv"),
            expr_clean_test = temp("clean_expr_test"+"{suffix}"+".tsv")
        params:
            target_col = "Cetuximab_Standard_3wks_cat"
        run:
            import pandas as pd

            # load sample id conversion table, drug response data
            target_col = params.target_col
            drug_response_data = pd.read_csv(input.response, sep="\t")
            

            # load expression data from RNAseq
            # these are variance stabilized (vsd)
            rnaseq_matrix = pd.read_csv(input.expr, sep="\t", header=0, index_col=0)
            # transpose for merging, index on full RNAseq id
            rnaseq_matrix = rnaseq_matrix.T.reset_index().\ 
                rename(columns={'index': 'ircc_id'})
            # aggregate RNAseq replicates (same short id) by expr mean
            rnaseq_matrix["ircc_id_short"] = rnaseq_matrix.ircc_id.apply(lambda x: x[0:7])
            rnaseq_matrix = rnaseq_matrix.groupby('ircc_id_short').mean().reset_index()
            # merge expression and response using the short genealogy id
            # to link the RNA id and the DNA id
            merge_matrix = pd.merge(rnaseq_matrix,
                                    drug_response_data[[
                                        target_col, "ircc_id_short", "ircc_id",'is_test']],
                                    on="ircc_id_short")
            train_models =  merge_matrix[merge_matrix.is_test == False].ircc_id
            test_models = merge_matrix[merge_matrix.is_test == True].ircc_id 
            # drop instances w/t missing target value
            merge_matrix = merge_matrix[~merge_matrix[target_col].isna()]
            merge_matrix = merge_matrix.drop(["ircc_id_short", 
                "is_test"], axis=1).\
                set_index("ircc_id").drop_duplicates()
            # transpose again for PROGENy, split train/test
            out_df = merge_matrix.T
            out_df[train_models].to_csv(output.expr_clean_train, sep="\t")
            out_df[test_models].to_csv(output.expr_clean_test, sep="\t")

# calc PROGENy scores for train, test separately
rule calc_progeny:
    input:
        expr_train = rules.expr_Preproc.output.expr_clean_train,
        expr_test = rules.expr_Preproc.output.expr_clean_test
    output:
        progeny_train = "progeny_train" + "{suffix}" + ".tsv",
        progeny_test = "progeny_test" + "{suffix}" + ".tsv" 
    script:
       srcdir+"/progeny_SamplePathActivity.R"


## preprocess ssGSEA Hallmarks and PROGENy scores computed on
## variance stabilised expression
rule expr_FeatPreproc:
    input:
        response = "DrugResponse_LMXfirslevel_trainTest"+"{suffix}"+".tsv",
        progeny_train = "progeny_train"+"{suffix}"+".tsv",
        progeny_test = "progeny_test"+"{suffix}"+".tsv", 
        hallmarks_train = datadir+"/ssGSEA_10fold/"+"{suffix}"+"_LMXfirstlevel_train_h-scores.tsv",
        hallmarks_test = datadir+"/ssGSEA_10fold/"+"{suffix}"+"_LMXfirstlevel_test_h-scores.tsv"
    output:
        preproc_expr = "preproc_expr"+"{suffix}"+".tsv"
    params:
        target_col = "Cetuximab_Standard_3wks_cat",
        corr_thrs = .7
    log:
        "expr_featureEng{suffix}.log"
    script:
        srcdir+"/2d_PDx_DrugResponse_geneExpr_encodeHALLMARK+PROGENy.py"