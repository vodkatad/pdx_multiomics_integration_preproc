import numpy as np
import pandas as pd

configfile: './config'
datadir = config["PRJ_ROOT"] + config["DATA_DIR"]
srcdir = config["SRC"]

# map different PDx model ids
# merge drug response data, select target
# split samples in train/test set
rule trainTest_split:
    input:
        ids = datadir+"/mapping_sanger_ID_genealogy_long.tsv",
        drug = datadir + "/drug_response/Treatments_Eugy_Ele_fix0cetuxi_201005.tsv"
    output:
        response_tab = "DrugResponse_LMXfirslevel_trainTest.tsv"
    params:
        testSize = config['TEST_SIZE'],
        target_col = config['TARGET_COL'],
        class_labels = config['CLASS_LABELS'],
        class_bins = config['CLASS_BINS']
    script:
        srcdir+"/1_PDx_drug_response_preTrainTest.py"

# copy number feature preprocessing
# remove low variance features, colinear features
# viz CN feature importance via linearSCV loadings
rule CN_FeatClean:
    input:
        response = rules.trainTest_split.output.response_tab,
        cnv = datadir + "/CNA_annotation/our_cn_genes2_CNVkitREDO_25012021.tsv",
        targeted = datadir + "/targeted_intogen_common_geneset.tsv",
        TCGA_CNV = datadir + "/TCGA_COADREAD_02092020_maskedCNS_intogen_admire-gistic_genewise_CNV_mapToGene.tsv"
    output:
        Xtrain = "PDx_CNV_FeatSelect_Xtrain.tsv",
        Xtest = "PDx_CNV_FeatSelect_Xtest.tsv",
        loadings_fig = "PDx_CNV_FeatSelect_loadings_barplot.pdf"
    params:
        var_thrs = "95%", # remove binary features w/t low variability (> var_thrs)
        similarity_trsh = .8, # combine similar features (product)
        ANOVA_pctl = 20,
        target_col = "Cetuximab_Standard_3wks_cat"
    log:
        "CN_FeatClean.log"
    script:
        srcdir+"/2_PDx_CN_GeneWise_CNVkitREDO_MultiFeatSel.py"

# mutation data feature preprocessing
# remove colinear features, 0 var features,
# build mut combo features
# viz mut feature importance via linearSCV loadings
rule mut_FeatClean:
    input:
        response = rules.trainTest_split.output.response_tab,
        mut = datadir+"/Driver_Annotation/CodingVariants_All669PDX_samples_26Feb2020_annotated_drivers_shortVersionForPDXfinder_EK.txt"
    output:
        Xtrain = "PDx_mut_FeatSelect_Xtrain.tsv",
        Xtest = "PDx_mut_FeatSelect_Xtest.tsv",
        loadings_fig = "PDx_mut_FeatSelect_loadings_barplot.pdf"
    params:
        var_thrs = "99%", # remove binary features w/t low variability (> var_thrs)
        similarity_trsh = .8, # combine similar features (product)
        ANOVA_pctl = 30, 
        target_col = "Cetuximab_Standard_3wks_cat"
    log: "mut_FeatClean.log"
    script:
        srcdir+"/2a_somatic_driver_mut_combinations.py"

# mutation VAF features preprocessing
# remove colinear features, 0 var features
# viz mut VAF feature importance via linearSCV loadings
rule mutVAF_FeatClean:
    input:
        response = rules.trainTest_split.output.response_tab,
        mut = datadir+"/Driver_Annotation/CodingVariants_All669PDX_samples_26Feb2020_annotated_drivers_shortVersionForPDXfinder_EK.txt"
    output:
        Xtrain = "PDx_mutVAF_FeatSelect_Xtrain.tsv",
        Xtest = "PDx_mutVAF_FeatSelect_Xtest.tsv",
        loadings_fig = "PDx_mutVAF_FeatSelect_loadings_barplot.pdf"
    params:
        var_thrs = "99%", # remove binary features w/t low variability (> var_thrs)
        ANOVA_pctl = 50, 
        target_col = "Cetuximab_Standard_3wks_cat"
    log: "mutVAF_FeatClean.log"
    script:
        srcdir+"/2b_somatic_driver_mut_VAF.py"

# feature selection on variance stabilised expression data
# ANOVA fscore filter + linearSVC l1
rule expr_FeatCleanSelect:
    input:
        response = rules.trainTest_split.output.response_tab,
        expr = datadir+"/RNAseq/release_2/selected_matrix.tsv"
    output:
        Xtrain = "PDx_expr_FeatSelect_Xtrain.tsv",
        Xtest = "PDx_expr_FeatSelect_Xtest.tsv",
        boundary_fig = "PDx_expr_FeatSelect_boundary_scatterplot.pdf",
        featSelect_model = "PDx_expr_FeatSelect_lSVC.pkl",
        loadings_fig = "PDx_expr_FeatSelect_loadings_barplot.pdf"
    params:
        target_col = "Cetuximab_Standard_3wks_cat",
        full_labels = config['FULL_CLASS_LABELS'],
        class_labels = config['CLASS_LABELS']
    log: "expr_FeatCleanSelect.log"
    threads: 8
    script:
        srcdir+"/2_PDx_DrugResponse_geneExpr_MultiFeatSelect.py"

# feature selection on methylation (B) data
# ANOVA fscore filter + linearSVC l1
rule meth_FeatCleanSelect:
    input:
        response = rules.trainTest_split.output.response_tab,
        meth_m = datadir + "/methylation/m_values_Umberto.hdf5",
        meth_B_DTpval = datadir + "/methylation/beta_DT-pvalue_Xeno.tsv",
        meth_m_sd = datadir + "/methylation/m_sdvalue.tsv"
    output:
        Xtrain = "PDx_meth_FeatSelect_Xtrain.tsv",
        Xtest = "PDx_meth_FeatSelect_Xtest.tsv",
        boundary_fig = "PDx_meth_FeatSelect_boundary_scatterplot.pdf",
        featSelect_model = "PDx_meth_FeatSelect_lSVC.pkl",
        loadings_fig = "PDx_meth_FeatSelect_loadings_barplot.pdf"
    params:
        target_col = "Cetuximab_Standard_3wks_cat",
        binom_test_FDR = .05,
        sd_pctl = "30%",
        full_labels = config['FULL_CLASS_LABELS'],
        class_labels = config['CLASS_LABELS'] 
    log: "meth_FeatCleanSelect.log"
    threads: 8
    script:
        srcdir+"/2_PDx_Meth_MultiFeatSelect.py"

# check, enforce instance consistency across all train sets
rule MultiFeatSelect_post_train:
    input:
        response = rules.trainTest_split.output.response_tab,
        mutVAF_Xtrain = rules.mutVAF_FeatClean.output.Xtrain,
        mut_Xtrain = rules.mut_FeatClean.output.Xtrain,
        cnv_Xtrain = rules.CN_FeatClean.output.Xtrain,
        meth_Xtrain = rules.meth_FeatCleanSelect.output.Xtrain,
        expr_Xtrain = rules.expr_FeatCleanSelect.output.Xtrain,
    output:
        mutVAF_Xtrain = "PDx_mutVAF_FeatSelect_Xtrain_post.tsv",
        mut_Xtrain = "PDx_mut_FeatSelect_Xtrain_post.tsv",
        cnv_Xtrain = "PDx_cnv_FeatSelect_Xtrain_post.tsv",
        meth_Xtrain = "PDx_meth_FeatSelect_Xtrain_post.tsv", 
        expr_Xtrain = "PDx_expr_FeatSelect_Xtrain_post.tsv",
        Ytrain = "PDx_Ytrain_post.tsv" 
    log:
        "MultiFeatSelect_post_train.log"
    params:
       target_col = "Cetuximab_Standard_3wks_cat"
    script:
        srcdir+"/3_MultiFeatSelect_post.py"

# check, enforce instance consistency across all test sets
rule MultiFeatSelect_post_test:
    input:
        response = rules.trainTest_split.output.response_tab,
        mutVAF_Xtest = rules.mutVAF_FeatClean.output.Xtest,
        mut_Xtest = rules.mut_FeatClean.output.Xtest,
        cnv_Xtest = rules.CN_FeatClean.output.Xtest,
        meth_Xtest = rules.meth_FeatCleanSelect.output.Xtest,
        expr_Xtest = rules.expr_FeatCleanSelect.output.Xtest,
    output:
        mutVAF_Xtest = "PDx_mutVAF_FeatSelect_Xtest_post.tsv",
        mut_Xtest = "PDx_mut_FeatSelect_Xtest_post.tsv",
        cnv_Xtest = "PDx_cnv_FeatSelect_Xtest_post.tsv",
        meth_Xtest = "PDx_meth_FeatSelect_Xtest_post.tsv", 
        expr_Xtest = "PDx_expr_FeatSelect_Xtest_post.tsv",
        Ytest = "PDx_Ytest_post.tsv" 
    log:
        "MultiFeatSelect_post_test.log"
    params:
       target_col = "Cetuximab_Standard_3wks_cat"
    script:
        srcdir+"/3_MultiFeatSelect_post_test.py"

rule train_DIABLO:
    input:
        mutVAF_Xtrain  = rules.MultiFeatSelect_post_train.output.mutVAF_Xtrain,
        mut_Xtrain  = rules.MultiFeatSelect_post_train.output.mut_Xtrain, 
        cnv_Xtrain  = rules.MultiFeatSelect_post_train.output.cnv_Xtrain, 
        meth_Xtrain  = rules.MultiFeatSelect_post_train.output.meth_Xtrain,
        expr_Xtrain  = rules.MultiFeatSelect_post_train.output.expr_Xtrain,
        Ytrain = rules.MultiFeatSelect_post_train.output.Ytrain, 
    output:
        ncompBER_plot = "PDx_IntegratedDIABLO_ncompBER_lineplot.pdf",
        splsda_model =  "PDx_IntegratedTunedDIABLO_splsda.rds",
    threads: 8    
    params:
        target_col = "Cetuximab_Standard_3wks_cat",
        max_ncomp = 4,
        minfeatures = config['DIABLO_MINFEATURES'],
        maxfeatures = config['DIABLO_MAXFEATURES'],
        step = config['DIABLO_STEP']
    script:
         srcdir+"/DIABLO_integrated_model.R"

rule perf_DIABLO:
    input:
        model = rules.train_DIABLO.output.splsda_model,
        mutVAF_Xtest  = rules.MultiFeatSelect_post_test.output.mutVAF_Xtest,
        mut_Xtest  = rules.MultiFeatSelect_post_test.output.mut_Xtest, 
        cnv_Xtest  = rules.MultiFeatSelect_post_test.output.cnv_Xtest, 
        meth_Xtest  = rules.MultiFeatSelect_post_test.output.meth_Xtest,
        expr_Xtest  = rules.MultiFeatSelect_post_test.output.expr_Xtest,
        Ytest = rules.MultiFeatSelect_post_test.output.Ytest
    output:
        trainBER_table = "PDx_IntegratedTunedDIABLO_BER.tsv", 
        PlotIndiv = "PDx_IntegratedTunedDIABLO_PlotIndiv.pdf",
        PlotLoadings = "PDx_IntegratedTunedDIABLO_PlotLoadings.pdf",
        loadings_table = "PDx_IntegratedTunedDIABLO_loadings.tsv",
        plotDiablo = "PDx_IntegratedTunedDIABLO_plotDiablo.pdf",
        plotArrow = "PDx_IntegratedTunedDIABLO_plotArrow.pdf",
        circosPlot = "PDx_IntegratedTunedDIABLO_circosPlot.pdf",
        corrHeatmap = "PDx_IntegratedTunedDIABLO_corrHeatmap.pdf",
        confusionMat = "PDx_IntegratedTunedDIABLO_confusionMat.tsv"
    threads: 8    
    params:
        target_col = "Cetuximab_Standard_3wks_cat",
    log:
       "perf_DIABLO.log"
    script:
         srcdir+"/DIABLO_integrated_model_perf.R"

